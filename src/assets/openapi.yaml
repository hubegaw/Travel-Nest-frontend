openapi: 3.0.3
info:
  title: Travel Nest - journey management API
  description: Travel Nest - journey management API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local server
paths:
  /auth/register:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDTO'
      operationId: register
      summary: register user
      responses:
        '201':
          description: register
  /auth/authenticate:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDTO'
      operationId: authenticate
      summary: authenticate user
      responses:
        '200':
          description: authenticate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/refresh-token:
    post:
      summary: Refreshes the access token
      operationId: refreshAccessToken
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized - Invalid refresh token
        '500':
          description: Internal server error
  /v1/users:
    get:
      operationId: getAllUsers
      summary: Get list of all users
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: All users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
  /v1/users/{userId}:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      operationId: getUserById
      summary: Get user by id
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      operationId: updateUserProfile
      summary: Update user by id
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /v1/users/{email}:
    get:
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      operationId: getUserByEmail
      summary: Get user by email
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /v1/journeys:
    get:
      operationId: getAllUserJourneys
      summary: Get list of all user's journeys
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: All user's journeys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JourneyDTO'
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JourneyDTO'
      operationId: saveJourney
      summary: save journey
      security:
        - bearerAuth: [ ]
      responses:
        '201':
          description: save journey
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: deleteJourney
      summary: Delete journey
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: delete journey
  /v1/journeys/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getJourney
      summary: Get journey
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: get journey
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyDTO'
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      operationId: updateJourney
      summary: Update journey
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: update journey
  /v1/amadeus/flights/flight-offers:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlightOfferDTO'
      operationId: postFlightOffers
      summary: post flight offers
      responses:
        '200':
          description: post flight offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightOfferResponse'
  /v1/amadeus/airports:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AirportAndCityRequest'
      operationId: getAirports
      summary: get airports
      responses:
        '200':
          description: get airports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirportAndCityResponse'
  /v1/amadeus/hotels:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelRequest'
      operationId: getHotelsByCity
      summary: get hotels by city
      responses:
        '200':
          description: get hotels by city
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HotelResponse'
  /v1/amadeus/hotels/offers:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelOfferRequest'
      operationId: getHotelsOffers
      summary: get hotels offers
      responses:
        '200':
          description: get hotels offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HotelOffer'
  /v1/amadeus/recommendations/{city}:
    get:
      parameters:
        - name: city
          in: path
          required: true
          schema:
            type: string
      operationId: getRecommendations
      summary: Get recommended locations
      responses:
        '200':
          description: Successful response with recommended locations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationResponse'
  /v1/amadeus/recommendations/activities:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmadeusGeoCode'
      operationId: getActivities
      summary: Get activities for location
      responses:
        '200':
          description: Successful response with activities for location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivitiesResponse'

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        role:
          type: string
    JourneyDTO:
      type: object
      properties:
        id:
          type: string
        user:
          type: string
        startPlace:
          type: object
          items:
            $ref: '#/components/schemas/AddressDTO'
        destination:
          type: object
          items:
            $ref: '#/components/schemas/AddressDTO'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        placesToVisit:
          type: array
          items:
            $ref: '#/components/schemas/PlaceDTO'
        flights:
          type: array
          items:
            $ref: '#/components/schemas/FlightData'
        hotels:
          type: array
          items:
            type: object
            properties:
              hotelId:
                type: string
              name:
                type: string
              checkIn:
                type: string
                format: date
              checkOut:
                type: string
                format: date
              price:
                $ref: '#/components/schemas/Price'
              room:
                $ref: '#/components/schemas/Room'
              geoCode:
                type: object
                properties:
                  latitude:
                    type: number
                  longitude:
                    type: number
    PlaceDTO:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        coordinates:
          type: array
          items:
            type: number
    AddressDTO:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        street:
          type: string
        houseNumber:
          type: string
        apartmentNumber:
          type: string
    FlightOfferDTO:
      type: object
      properties:
        originLocationCode:
          type: string
        destinationLocationCode:
          type: string
        departureDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
        adults:
          type: integer
        children:
          type: integer
        travelClass:
          type: string
        nonStop:
          type: boolean
        currencyCode:
          type: string
        max:
          type: integer
    AuthDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
    AirportAndCityRequest:
      type: object
      properties:
        include:
          type: array
          items:
            type: string
        keyword:
          type: string
    AirportAndCityResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AirportData'
        included:
          $ref: '#/components/schemas/Included'
    AirportData:
      type: object
      properties:
        type:
          type: string
        subType:
          type: string
        name:
          type: string
        timeZoneOffset:
          type: string
        iataCode:
          type: string
        geoCode:
          $ref: '#/components/schemas/AmadeusGeoCode'
        address:
          $ref: '#/components/schemas/AmadeusAddress'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    AmadeusGeoCode:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
    AmadeusAddress:
      type: object
      properties:
        countryCode:
          type: string
    Relationship:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        href:
          type: string
    Included:
      type: object
      properties:
        airports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Airport'
    Airport:
      type: object
      properties:
        name:
          type: string
        iataCode:
          type: string
        subType:
          type: string
    FlightOfferResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FlightData'
        dictionaries:
          $ref: '#/components/schemas/Dictionary'
    FlightData:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        source:
          type: string
        oneWay:
          type: boolean
        lastTicketingDate:
          type: string
          format: date
        numberOfBookableSeats:
          type: integer
        itineraries:
          type: array
          items:
            $ref: '#/components/schemas/Itinerary'
        price:
          $ref: '#/components/schemas/Price'
    Itinerary:
      type: object
      properties:
        duration:
          type: string
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
    Segment:
      type: object
      properties:
        id:
          type: string
        departure:
          $ref: '#/components/schemas/Departure'
        arrival:
          $ref: '#/components/schemas/Arrival'
        numberOfStops:
          type: integer
        blacklistedInEU:
          type: boolean
        carrierCode:
          type: string
    Departure:
      type: object
      properties:
        iataCode:
          type: string
        terminal:
          type: string
        at:
          type: string
    Arrival:
      type: object
      properties:
        iataCode:
          type: string
        terminal:
          type: string
        at:
          type: string
    Price:
      type: object
      properties:
        currency:
          type: string
        total:
          type: string
        base:
          type: string
        grandTotal:
          type: string
    Dictionary:
      type: object
      properties:
        carriers:
          type: object
          additionalProperties:
            type: string
    HotelResponse:
      type: object
      properties:
        chainCode:
          type: string
        iataCode:
          type: string
        dupeId:
          type: number
        name:
          type: string
        hotelId:
          type: string
        geoCode:
          $ref: '#/components/schemas/AmadeusGeoCode'
        address:
          $ref: '#/components/schemas/AmadeusAddress'
    HotelRequest:
      type: object
      properties:
        cityCode:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        radius:
          type: number
        radiusUnit:
          type: string
        amenities:
          type: array
          items:
            type: string
        ratings:
          type: array
          items:
            type: string
    HotelOfferRequest:
      type: object
      properties:
        hotelIds:
          type: string
        adults:
          type: number
        checkInDate:
          type: string
          format: date
        checkOutDate:
          type: string
          format: date
        roomQuantity:
          type: number
        priceRange:
          type: string
    HotelOffer:
      type: object
      properties:
        type:
          type: string
        hotel:
          $ref: '#/components/schemas/Hotel'
        available:
          type: boolean
        offers:
          type: array
          items:
            $ref: '#/components/schemas/Offer'
        price:
          $ref: '#/components/schemas/Price'

    Offer:
      type: object
      properties:
        id:
          type: string
        checkInDate:
          type: string
          format: date
        checkOutDate:
          type: string
          format: date
        room:
          $ref: '#/components/schemas/Room'
        price:
          $ref: '#/components/schemas/Price'
    Hotel:
      type: object
      properties:
        type:
          type: string
        hotelId:
          type: string
        name:
          type: string
        cityCode:
          type: string
        latitude:
          type: string
        longitude:
          type: string
    Room:
      type: object
      properties:
        typeEstimated:
          $ref: '#/components/schemas/TypeEstimated'
        description:
          $ref: '#/components/schemas/Description'
    TypeEstimated:
      type: object
      properties:
        category:
          type: string
        beds:
          type: number
        bedType:
          type: string
    Description:
      type: object
      properties:
        text:
          type: string
    RecommendationResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          iataCode:
            type: string
          geoCode:
            $ref: '#/components/schemas/AmadeusGeoCode'
    ActivitiesResponse:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
          name:
            type: string
          description:
            type: string
          bookingLink:
            type: string
          minimumDuration:
            type: string
          pictures:
            type: array
            items:
              type: string
          geoCode:
            $ref: '#/components/schemas/AmadeusGeoCode'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
